int main()
{
    int a = 1, b = 0, c = 2, d = 3;
    int result = 0;
    
    // 测试1: 基本短路计算
    // a && b 应该短路，b不会被计算
    if (a && b) {
        result = 1;
    }
    
    // 测试2: 逻辑或短路
    // a || c 应该短路，c不会被计算
    if (a || c) {
        result = 2;
    }
    
    // 测试3: 复杂短路表达式
    // (a && b) || (c && a) 应该短路到第二个条件
    if ((a && b) || (c && a)) {
        result = 3;
    }
    
    // 测试4: 嵌套短路
    // a && (b || c) 应该短路，b和c都不会被计算
    if (a && (b || c)) {
        result = 4;
    }
    
    // 测试5: 多重短路
    // (a && b) && (c && d) 应该短路，b、c、d都不会被计算
    if ((a && b) && (c && d)) {
        result = 5;
    }
    
    // 测试6: 短路在循环中
    int i = 0;
    while (i < 5 && (a || b)) {
        i = i + 1;
        if (i > 3) {
            break;
        }
    }
    
    // 测试7: 短路在条件表达式中
    int x = (a && b) ? 10 : 20;
    int y = (a || b) ? 30 : 40;
    
    // 测试8: 短路与函数调用
    // 注意：这里假设有函数调用，实际测试中可能需要定义函数
    // if (a && func_call()) { ... }
    
    // 测试9: 短路与数组访问
    int arr[5] = {1, 2, 3, 4, 5};
    if (a && arr[10]) {  // 应该短路，避免数组越界
        result = 9;
    }
    
    // 测试10: 短路与指针操作
    int* ptr = 0;
    if (a && *ptr) {  // 应该短路，避免空指针解引用
        result = 10;
    }
    
    return result + x + y + i;
} 